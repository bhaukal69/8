import java.util.Scanner;
import java.util.*;
public class Bellmanford 
{
	private int D[];
    private int n,neigh[];   
	public static final int MAX_VALUE = 999;   
	public Bellmanford(int n)   
	{ 
		this.n=n;    
		D = new int[n+1];  
		neigh=new int[n+1];
	}   
	public void shortest(int s,int A[][])   
	{  	
		for (int i=1;i<=n;i++)    
		{  
			D[i]=MAX_VALUE;
			//D[s] = 0;
		}  
		D[s] = 0;   
		for(int k=1;k<=n;k++)    
		{ 
			for(int i=1;i<=n;i++)     
			{ 	
				for(int j=1;j<=n;j++)      
				{ 
					if(A[i][j]!=MAX_VALUE)       
					{  
						if(D[j]>D[i]+A[i][j])  
						{
							D[j]=D[i]+A[i][j];
							neigh[j]=i;
						}
						       
					}      
				}     
			}    
		}    
		for(int i=1;i<=n;i++)     
		{ 
			for(int j=1;j<=n;j++)      
			{ 
				if(A[i][j]!=MAX_VALUE)       
				{  
					if(D[j]>D[i]+A[i][j])  
					{  
						//System.out.println("The Graph contains negative egde cycle");
					        return;     
					}  
				}      
			}     
		}  
		for(int i=1;i<=n;i++) 
		{ 
			System.out.println("Distance of source " + i + " to "+ s + " is " + D[i]);  
		}  
		for(int i=1;i<=n;i++)
		{
			if(i==s)
				continue;
			System.out.print("the path from "+i+" to "+ s +" is: "+i+" ->");
			int k=neigh[i];
			System.out.print(k);
			while(true)
			{
				k=neigh[k];
				if(k==0)
					break;
				System.out.print("->"+k);
			}
			System.out.println();
		}
	}  
	public static void main(String[ ] args)  
	{ 
		int n=0,s;   
		Scanner ip = new Scanner(System.in);   
		System.out.println("Enter the number of vertices");   
		n = ip.nextInt(); 
		System.out.println("enter the destination vertex");
		s=ip.nextInt();
		int A[][] = new int[n+1][n+1];   
		System.out.println("Enter the Weighted matrix");   
		for(int i=1;i<=n;i++)   
		{ 
			for(int j=1;j<=n;j++)    
			{ 
				A[i][j]=ip.nextInt();     
				if(i==j)     
				{ 
					A[i][j]=0;      
					continue;     
				}     
				if(A[i][j]==0)     
				{  
					A[i][j]=MAX_VALUE;     
				}    
			}   
		}      
		Bellmanford b = new Bellmanford(n);    
		b.shortest(s,A);   
		ip.close();  
	}  
} 
